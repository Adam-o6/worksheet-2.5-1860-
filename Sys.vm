// Sys.xor
function Sys.xor 0
    // Pop the first argument (x) and second argument (y) from the stack
    pop local 0     // x
    pop local 1     // y

    // Perform the XOR operation (x ^ y)
    and local 0, local 1  // bitwise AND of x and y
    not local 0           // negate x
    and local 0, local 1  // x AND y
    or local 0, local 1   // x OR y (final XOR)

    // Push the result back onto the stack
    push local 0
    return


// Sys.shiftLeft
function Sys.shiftLeft 0
    // Pop the first and second arguments from the stack
    pop local 0     // x (number to shift)
    pop local 1     // y (number of positions to shift)

    // Perform the shift left operation
    push local 0    // Push x back to the stack
    label shiftLoop
    dec local 1     // Decrement y
    jeq endShift    // If y == 0, exit the loop
    push local 0    // Push x back to the stack
    add local 0, local 0  // x = x * 2 (shift left by 1)
    goto shiftLoop  // Repeat the loop

    label endShift
    return


// Sys.computeParity
function Sys.computeParity 0
    // Pop the input value from the stack
    pop local 0     // input value

    // Initialize the parity bit to 0
    push constant 0
    pop local 1     // parityBit = 0

    // Loop over the 15 right-most bits
    push constant 15
    pop local 2     // loop counter i = 15
    label loopStart
    dec local 2     // Decrement i
    if-goto loopEnd // If i < 0, exit the loop

    // Get the ith bit
    push local 0
    push constant 1
    shiftLeft 2     // bitmask = 1 << i
    and local 0, local 2  // ith bit = input & bitmask

    // Update the parity bit if the ith bit is 1
    if-goto parityUpdate
    goto loopStart

    label parityUpdate
    xor local 1, constant 1  // parityBit = parityBit ^ 1
    goto loopStart

    label loopEnd
    // Push the parity bit to the stack
    push local 1
    return


// Sys.encode
function Sys.encode 0
    // Pop the input value from the stack
    pop local 0     // input value

    // Compute the parity bit using Sys.computeParity
    call Sys.computeParity 1

    // Get the parity bit
    pop local 1     // parityBit

    // If parityBit is 1, set the most significant bit
    push constant 32768   // 10000000 00000000 in binary (MSB)
    and local 0, local 1  // parityBit & MSB
    if-goto paritySet

    // Otherwise clear the MSB
    push constant 32768   // 10000000 00000000 in binary (MSB)
    not local 2
    and local 0, local 2  // Clear the MSB
    goto endEncoding

    label paritySet
    push constant 32768   // Set the MSB
    or local 0, local 1   // Set the MSB to 1

    label endEncoding
    // Push the encoded value back to the stack
    push local 0
    return


// Sys.init (Test)
function Sys.init 0
    // Test Sys.xor
    push constant 12 // 00000000 00001100
    push constant 6  // 00000000 00000110
    call Sys.xor 2   // 00000000 00001010 (result: 10)

    // Test Sys.shiftLeft
    push constant 6  // 00000000 00000110
    push constant 2  // 2 positions to shift
    call Sys.shiftLeft 2   // 00000000 00011000 (result: 24)

    // Test Sys.computeParity
    push constant 31 // 00000000 00011111 (odd parity)
    call Sys.computeParity 1 // 00000000 00000001 (parity: 1)

    // Test Sys.encode
    push constant 31 // 00000000 00011111
    call Sys.encode 1 // Encodes the value with the parity bit set

    return

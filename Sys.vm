/***************************************
 * Sys.xor
 * Computes the bitwise exclusive-or of the two values
 * at the top of the stack.
 * (a XOR b = (a OR b) AND (NOT (a AND b)))
 ***************************************/
function Sys.xor 0
  // Pop two values: b is at temp 0, a at temp 1.
  pop temp 0       // b
  pop temp 1       // a

  // Compute a OR b.
  push temp 1      // a
  push temp 0      // b
  or
  pop temp 2       // store (a OR b) in temp 2

  // Compute a AND b, then NOT (a AND b).
  push temp 1      // a
  push temp 0      // b
  and
  not

  // Compute final result: (a OR b) AND (NOT (a AND b))
  push temp 2
  and
  return

/***************************************
 * Sys.shiftLeft
 * Shifts the first argument left by the number of positions
 * specified by the second argument. (x << y) = x * 2^y.
 ***************************************/
function Sys.shiftLeft 2
  // Use local 0 for result and local 1 for counter.
  push argument 0
  pop local 0      // result = x

  push argument 1
  pop local 1      // counter = y

  label LOOP_START
    // If counter == 0, finish.
    push local 1
    push constant 0
    eq
    if-goto END_LOOP

    // Double the result: result = result + result.
    push local 0
    push local 0
    add
    pop local 0

    // Decrement counter.
    push local 1
    push constant 1
    sub
    pop local 1

    goto LOOP_START
  label END_LOOP
  push local 0      // push final result onto the stack.
  return

/***************************************
 * Sys.computeParity
 * Computes the parity (0 if even number of 1's, 1 if odd)
 * of the 15 right-most bits of the input.
 * The most significant (16th) bit is ignored.
 ***************************************/
function Sys.computeParity 4
  // Pop input from the stack and store it in local 2.
  pop local 2        // input value

  // Initialize parity (local 0) to 0.
  push constant 0
  pop local 0        // parity = 0

  // Initialize loop counter (local 1) to 0.
  push constant 0
  pop local 1        // i = 0

  label LOOP_START
    // If i == 15, exit loop.
    push local 1
    push constant 15
    eq
    if-goto END_LOOP

    // Compute bitmask = 1 << i using Sys.shiftLeft.
    push constant 1
    push local 1
    call Sys.shiftLeft 2   // returns (1 << i)
    pop local 3             // bitmask = local 3

    // Compute ithBit = input AND bitmask.
    push local 2            // input value
    push local 3            // bitmask
    and

    // If the bit is set, toggle parity.
    if-goto BIT_SET
      goto LOOP_CONTINUE
    label BIT_SET
      // parity = parity XOR 1.
      push local 0
      push constant 1
      call Sys.xor 2
      pop local 0         // update parity
    label LOOP_CONTINUE

    // Increment loop counter: i = i + 1.
    push local 1
    push constant 1
    add
    pop local 1

    goto LOOP_START
  label END_LOOP
  push local 0           // Push computed parity as result.
  return

/***************************************
 * Sys.encode
 * Encodes an input value by computing the parity of its 15 lower bits,
 * then setting (if parity == 1) or clearing (if parity == 0) the left-most bit.
 * The left-most bit is bit 15 (value 32768).
 ***************************************/
function Sys.encode 0
  // Pop the input value into local 0.
  pop local 0        // input

  // Compute parity of lower 15 bits.
  push local 0
  call Sys.computeParity 1
  pop temp 0         // temp 0 holds parity (0 or 1)

  // Prepare constant mask for the left-most bit: 1 << 15 = 32768.
  push constant 32768
  pop temp 1         // temp 1 holds mask

  // If parity is 0, clear the left-most bit.
  push temp 0
  push constant 0
  eq
  if-goto CLEAR
    // Otherwise (parity is 1), set the left-most bit.
    push local 0    // input
    push temp 1     // mask
    or
    goto DONE
  label CLEAR
    push local 0    // input
    push temp 1     // mask
    not
    and
  label DONE
  return

/***************************************
 * Sys.init
 * Test code: Uncomment one of the test sections below to try out each function.
 ***************************************/
function Sys.init 0
  // Uncomment one of the following tests:

  // --- Test Sys.xor ---
  // push constant 12    // 00000000 00001100
  // push constant 6     // 00000000 00000110
  // call Sys.xor 2      // Expected output: 10 (00000000 00001010)

  // --- Test Sys.shiftLeft ---
  // push constant 6     // 00000000 00000110
  // push constant 2
  // call Sys.shiftLeft 2   // Expected output: 24 (00000000 00011000)

  // --- Test Sys.computeParity ---
  // push constant 31    // 00000000 00011111 has an odd number of 1's
  // call Sys.computeParity 1   // Expected output: 1

  // --- Test Sys.encode ---
  // Example: Encode 31.
  // push constant 31    // input value: 00000000 00011111
  // call Sys.encode 1   // Expected output: left-most bit set if parity is 1

  // For a combined test, you might push several test cases in sequence.
  return

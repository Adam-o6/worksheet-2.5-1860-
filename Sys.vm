// Performs bitwise XOR of two values on the stack
function Sys.xor 0
  pop temp 0      // b
  pop temp 1      // a
  push constant 0
  pop temp 2      // result initialized to 0
  push constant 1
  pop temp 3      // bitmask = 1
  push constant 0
  pop temp 4      // loop counter i = 0
label XOR_LOOP
  push temp 4
  push constant 16
  eq
  if-goto XOR_END
  // isolate bits
  push temp 1
  push temp 3
  and
  push temp 0
  push temp 3
  and
  add
  push constant 1
  eq
  if-goto XOR_SET
  goto XOR_NEXT
label XOR_SET
  push temp 2
  push temp 3
  or
  pop temp 2
label XOR_NEXT
  // shift bitmask left
  push temp 3
  push temp 3
  add
  pop temp 3
  // increment counter
  push temp 4
  push constant 1
  add
  pop temp 4
  goto XOR_LOOP
label XOR_END
  push temp 2
  return

// Shifts argument 0 left by argument 1 positions (x << y)
function Sys.shiftLeft 0
  pop temp 0      // y
  pop temp 1      // x
label SHIFT_LOOP
  push temp 0
  push constant 0
  eq
  if-goto SHIFT_END
  push temp 1
  push temp 1
  add
  pop temp 1
  push temp 0
  push constant 1
  sub
  pop temp 0
  goto SHIFT_LOOP
label SHIFT_END
  push temp 1
  return

// Computes parity of 15 rightmost bits of the top stack value
function Sys.computeParity 0
  pop temp 0       // input
  push constant 0
  pop temp 1       // parity = 0
  push constant 0
  pop temp 2       // counter i = 0
label PARITY_LOOP
  push temp 2
  push constant 15
  eq
  if-goto PARITY_END
  // bitmask = 1 << i
  push constant 1
  push temp 2
  call Sys.shiftLeft 2
  pop temp 3       // bitmask
  push temp 0
  push temp 3
  and
  push constant 0
  eq
  if-goto PARITY_CONTINUE
  push temp 1
  push constant 1
  call Sys.xor 2
  pop temp 1       // update parity
label PARITY_CONTINUE
  push temp 2
  push constant 1
  add
  pop temp 2
  goto PARITY_LOOP
label PARITY_END
  push temp 1
  return

// Encodes value with parity bit set at leftmost bit
function Sys.encode 0
  pop temp 0       // input
  push temp 0
  call Sys.computeParity 1
  pop temp 1       // parity
  push temp 1
  push constant 0
  eq
  if-goto ENCODE_CLEAR
  // set MSB if parity is 1
  push temp 0
  push constant 32768
  or
  return
label ENCODE_CLEAR
  // clear MSB if parity is 0
  push temp 0
  push constant 32767  // 0111111111111111
  and
  return

// Sys.init function to test each method clearly
function Sys.init 0
  // Test Sys.xor: Expected result = 10
  push constant 12
  push constant 6
  call Sys.xor 2
  // Stack should have 10

  // Test Sys.shiftLeft: Expected result = 24
  push constant 6
  push constant 2
  call Sys.shiftLeft 2
  // Stack should have 24 on top

  // Test Sys.computeParity: Expected result = 1
  push constant 31
  call Sys.computeParity 1
  // Stack should have 1 on top

  // Test Sys.encode: Expected result = 32799 (32768 + 31)
  push constant 31
  call Sys.encode 1
  // Stack should have 32799 on top
  
  return

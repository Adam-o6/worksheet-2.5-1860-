// Function to compute bitwise XOR
function Sys.xor 0
    pop local 0         // Pop first value into local 0
    pop local 1         // Pop second value into local 1

    push local 0        // Push first value back onto stack
    push local 1        // Push second value back onto stack
    xor                 // Perform bitwise XOR operation

    return              // Return with result at top of the stack

// Function to shift left (x << y)
function Sys.shiftLeft 0
    pop local 0         // Pop x (value to shift)
    pop local 1         // Pop y (shift count)

    label SHIFT_LOOP
    push local 1
    if-goto CONTINUE_SHIFT   // If y > 0, continue
    goto END_SHIFT           // If y == 0, exit loop

    label CONTINUE_SHIFT
    push local 0
    push constant 2
    call Math.multiply 2     // Multiply x by 2
    pop local 0              // Store updated x

    push local 1
    push constant 1
    sub                      // y = y - 1
    pop local 1              // Store updated y

    goto SHIFT_LOOP          // Repeat until y == 0

    label END_SHIFT
    push local 0             // Push final result onto stack
    return

// Initialization function to test both functions
function Sys.init 0
    // Test Sys.xor: 12 ^ 6 should give 10
    push constant 12
    push constant 6
    call Sys.xor 2           // Expect 10 on top of stack

    // Test Sys.shiftLeft: 6 << 2 should give 24
    push constant 6
    push constant 2
    call Sys.shiftLeft 2      // Expect 24 on top of stack
